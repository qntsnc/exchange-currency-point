import React, { useState, useEffect, useCallback } from 'react';
import './ClientsPage.css';

const ClientsPage = () => {
  const [clients, setClients] = useState([]);
  const [newClient, setNewClient] = useState({ passport_number: '', full_name: '', phone_number: '' });
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(false);
  const [formError, setFormError] = useState('');

  const fetchClients = useCallback(async () => {
    setLoading(true);
    setError('');
    try {
      const response = await fetch('http://localhost:8080/api/v1/clients');
      if (!response.ok) {
        const errData = await response.json();
        throw new Error(errData.message || `Network response was not ok (${response.status})`);
      }
      const data = await response.json();
      setClients(data.data || []);
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤: ' + err.message);
      console.error(err);
    } finally {
      setLoading(false);
    }
  }, []);

  useEffect(() => {
    fetchClients();
  }, [fetchClients]);

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setNewClient(prev => ({ ...prev, [name]: value }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setFormError('');
    if (!newClient.passport_number.trim() || !newClient.full_name.trim()) {
        setFormError('–ù–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞ –∏ –§–ò–û –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è.');
        return;
    }
    setLoading(true);
    try {
      const response = await fetch('http://localhost:8080/api/v1/clients', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(newClient)
      });
      if (!response.ok) {
        const errData = await response.json();
        throw new Error(errData.message || `Network response was not ok (${response.status})`);
      }
      setNewClient({ passport_number: '', full_name: '', phone_number: '' });
      fetchClients();
    } catch (err) {
      setFormError('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: ' + err.message);
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  const handleViewClient = (clientId) => {
    // –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–ª–∏–µ–Ω—Ç–∞
    console.log('–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–ª–∏–µ–Ω—Ç–∞:', clientId);
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∏–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–ª–∏–µ–Ω—Ç–∞
  };

  const handleEditClient = (clientId) => {
    // –§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
    console.log('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞:', clientId);
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
  };

  const formatDate = (dateTimeStr) => {
  if (!dateTimeStr) return '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
  
  try {
    // –ï—Å–ª–∏ dateTimeStr —ç—Ç–æ –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª–µ–º Time, –∏–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ Time
    if (typeof dateTimeStr === 'object' && dateTimeStr !== null) {
      if (dateTimeStr.Time) {
        dateTimeStr = dateTimeStr.Time;
      } else {
        // –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª—è Time, –Ω–æ –µ—Å—Ç—å Valid, –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ NullTime –∏–∑ Go
        if (dateTimeStr.Valid === false) {
          return '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
        }
        // –ü–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –æ–±—ä–µ–∫—Ç –≤ —Å—Ç—Ä–æ–∫—É
        dateTimeStr = String(dateTimeStr);
      }
    }
    
    // –ï—Å–ª–∏ dateTimeStr —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
    if (typeof dateTimeStr === 'string') {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ ISO 8601 —Å Z –≤ –∫–æ–Ω—Ü–µ –∏ –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥–∞–º–∏
      const isoRegex = /^(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2})(\.\d+)?([+-]\d{2}:\d{2}|Z)?$/;
      const match = dateTimeStr.match(isoRegex);
      
      if (match) {
        // –£–∂–µ –≤–∞–ª–∏–¥–Ω—ã–π ISO —Ñ–æ—Ä–º–∞—Ç, –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é
        const date = new Date(dateTimeStr);
        return date.toLocaleString('ru-RU');
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç "YYYY-MM-DD HH:MM:SS"
      const dateMatch = dateTimeStr.match(/(\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2})/);
      if (dateMatch) {
        const cleanedDate = dateMatch[1].replace(' ', 'T');
        const date = new Date(cleanedDate);
        if (!isNaN(date.getTime())) {
          return date.toLocaleString('ru-RU');
        }
      }
    }
    
    // –ï—Å–ª–∏ –≤—Å–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –ø—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ —Å–æ–∑–¥–∞—Ç—å Date
    const date = new Date(dateTimeStr);
    if (!isNaN(date.getTime())) {
      return date.toLocaleString('ru-RU');
    }
    
    // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ
    return '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞';
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞—Ç—ã:', error);
    return '–û—à–∏–±–∫–∞ –¥–∞—Ç—ã';
  }
};

  return (
    <div className="main-content">
      <div className="container">
        <h1 className="page-title">üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞–º–∏</h1>

        {/* –û–±—â–∏–µ –æ—à–∏–±–∫–∏ */}
        {error && (
          <div className="alert alert-error">
            <span className="alert-icon">‚ö†Ô∏è</span>
            {error}
          </div>
        )}

        {/* –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ */}
        <div className="client-form-section">
          <h2 className="section-title">‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞</h2>
          
          <form onSubmit={handleSubmit} className="client-form">
            {formError && (
              <div className="alert alert-error">
                <span className="alert-icon">‚ö†Ô∏è</span>
                {formError}
              </div>
            )}

            <div className="form-grid">
              <div className="form-field">
                <label htmlFor="passport_number">üìÑ –ù–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞</label>
                <input 
                  id="passport_number" 
                  type="text" 
                  name="passport_number" 
                  value={newClient.passport_number} 
                  onChange={handleInputChange}
                  placeholder="1234 567890"
                  required 
                  className="form-input"
                />
              </div>
              
              <div className="form-field">
                <label htmlFor="full_name">üë§ –§–ò–û</label>
                <input 
                  id="full_name" 
                  type="text" 
                  name="full_name" 
                  value={newClient.full_name} 
                  onChange={handleInputChange}
                  placeholder="–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á"
                  required 
                  className="form-input"
                />
              </div>
              
              <div className="form-field">
                <label htmlFor="phone_number">üì± –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</label>
                <input 
                  id="phone_number" 
                  type="text" 
                  name="phone_number" 
                  value={newClient.phone_number} 
                  onChange={handleInputChange}
                  placeholder="+7 (999) 123-45-67"
                  className="form-input"
                />
              </div>
            </div>

            <div className="form-actions">
              <button 
                type="submit" 
                disabled={loading}
                className="btn-primary"
              >
                {loading ? (
                  <>
                    <div className="loader"></div>
                    –î–æ–±–∞–≤–ª–µ–Ω–∏–µ...
                  </>
                ) : (
                  <>
                    <span>‚ûï</span>
                    –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞
                  </>
                )}
              </button>
            </div>
          </form>
        </div>

        {/* –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ */}
        <div className="clients-list-section">
          <h2 className="section-title">üìã –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤</h2>
          
          {loading && (
            <div className="loading-state">
              <div className="loader"></div>
              <p>–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤...</p>
            </div>
          )}

          {!loading && clients.length === 0 && (
            <div className="empty-state">
              <div className="empty-icon">üë•</div>
              <h3>–ù–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤</h3>
              <p>–ù–∞—á–Ω–∏—Ç–µ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Å–∏—Å—Ç–µ–º—É</p>
            </div>
          )}

          {!loading && clients.length > 0 && (
            <div className="clients-table-container">
              <table className="clients-table">
                <thead>
                  <tr>
                    <th>üî¢ ID</th>
                    <th>üë§ –ö–ª–∏–µ–Ω—Ç</th>
                    <th>üìÑ –ü–∞—Å–ø–æ—Ä—Ç</th>
                    <th>üì± –¢–µ–ª–µ—Ñ–æ–Ω</th>
                    <th>üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏</th>
                    <th>‚öôÔ∏è –î–µ–π—Å—Ç–≤–∏—è</th>
                  </tr>
                </thead>
                <tbody>
                  {clients.map(client => (
                    <tr key={client.id} className="client-row">
                      <td className="id-cell">
                        <span className="client-id-badge">
                          {client.id}
                        </span>
                      </td>
                      <td className="client-info">
                        <div className="client-name">{client.full_name}</div>
                      </td>
                      <td className="passport-cell">
                        <span className="passport-number">
                          {client.passport_number || '–ù–µ —É–∫–∞–∑–∞–Ω'}
                        </span>
                      </td>
                      <td className="phone-cell">
                        <span className="phone-number">
                          {client.phone_number?.String || client.phone_number || '–ù–µ —É–∫–∞–∑–∞–Ω'}
                        </span>
                      </td>
                      <td className="date-cell">
                        <span className="registration-date">
                          {formatDate(client.created_at)}
                        </span>
                      </td>
                      <td className="actions-cell">
                        <div className="action-buttons">
                          <button 
                            onClick={() => handleViewClient(client.id)}
                            className="btn-view"
                            title="–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è"
                          >
                            <span>üëÅÔ∏è</span>
                            –ü—Ä–æ—Å–º–æ—Ç—Ä
                          </button>
                          <button 
                            onClick={() => handleEditClient(client.id)}
                            className="btn-edit"
                            title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
                          >
                            <span>‚úèÔ∏è</span>
                            –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                          </button>
                        </div>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default ClientsPage;