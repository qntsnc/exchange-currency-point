// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: operation_limits.sql

package sqlcgen

import (
	"context"
	"database/sql"
)

const createOperationLimit = `-- name: CreateOperationLimit :one
INSERT INTO operation_limits (limit_name, limit_value, description)
VALUES ($1, $2, $3)
RETURNING id, limit_name, limit_value, description, created_at, updated_at
`

type CreateOperationLimitParams struct {
	LimitName   string         `json:"limit_name"`
	LimitValue  string         `json:"limit_value"`
	Description sql.NullString `json:"description"`
}

// Создать новое ограничение операции
func (q *Queries) CreateOperationLimit(ctx context.Context, arg CreateOperationLimitParams) (OperationLimit, error) {
	row := q.db.QueryRowContext(ctx, createOperationLimit, arg.LimitName, arg.LimitValue, arg.Description)
	var i OperationLimit
	err := row.Scan(
		&i.ID,
		&i.LimitName,
		&i.LimitValue,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteOperationLimit = `-- name: DeleteOperationLimit :exec
DELETE FROM operation_limits
WHERE limit_name = $1
`

// Удалить ограничение операции
func (q *Queries) DeleteOperationLimit(ctx context.Context, limitName string) error {
	_, err := q.db.ExecContext(ctx, deleteOperationLimit, limitName)
	return err
}

const getOperationLimit = `-- name: GetOperationLimit :one
SELECT id, limit_name, limit_value, description, created_at, updated_at FROM operation_limits
WHERE limit_name = $1
`

// Получить ограничение операции по имени
func (q *Queries) GetOperationLimit(ctx context.Context, limitName string) (OperationLimit, error) {
	row := q.db.QueryRowContext(ctx, getOperationLimit, limitName)
	var i OperationLimit
	err := row.Scan(
		&i.ID,
		&i.LimitName,
		&i.LimitValue,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listOperationLimits = `-- name: ListOperationLimits :many
SELECT id, limit_name, limit_value, description, created_at, updated_at FROM operation_limits
ORDER BY limit_name
`

// Получить список всех ограничений операций
func (q *Queries) ListOperationLimits(ctx context.Context) ([]OperationLimit, error) {
	rows, err := q.db.QueryContext(ctx, listOperationLimits)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []OperationLimit{}
	for rows.Next() {
		var i OperationLimit
		if err := rows.Scan(
			&i.ID,
			&i.LimitName,
			&i.LimitValue,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOperationLimit = `-- name: UpdateOperationLimit :one
UPDATE operation_limits
SET limit_value = $2
WHERE limit_name = $1
RETURNING id, limit_name, limit_value, description, created_at, updated_at
`

type UpdateOperationLimitParams struct {
	LimitName  string `json:"limit_name"`
	LimitValue string `json:"limit_value"`
}

// Обновить значение ограничения операции
func (q *Queries) UpdateOperationLimit(ctx context.Context, arg UpdateOperationLimitParams) (OperationLimit, error) {
	row := q.db.QueryRowContext(ctx, updateOperationLimit, arg.LimitName, arg.LimitValue)
	var i OperationLimit
	err := row.Scan(
		&i.ID,
		&i.LimitName,
		&i.LimitValue,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
