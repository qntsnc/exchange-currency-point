// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package sqlcgen

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createClientStmt, err = db.PrepareContext(ctx, createClient); err != nil {
		return nil, fmt.Errorf("error preparing query CreateClient: %w", err)
	}
	if q.createCurrencyStmt, err = db.PrepareContext(ctx, createCurrency); err != nil {
		return nil, fmt.Errorf("error preparing query CreateCurrency: %w", err)
	}
	if q.createOperationStmt, err = db.PrepareContext(ctx, createOperation); err != nil {
		return nil, fmt.Errorf("error preparing query CreateOperation: %w", err)
	}
	if q.getClientByIDStmt, err = db.PrepareContext(ctx, getClientByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetClientByID: %w", err)
	}
	if q.getClientByPassportStmt, err = db.PrepareContext(ctx, getClientByPassport); err != nil {
		return nil, fmt.Errorf("error preparing query GetClientByPassport: %w", err)
	}
	if q.getCurrencyStmt, err = db.PrepareContext(ctx, getCurrency); err != nil {
		return nil, fmt.Errorf("error preparing query GetCurrency: %w", err)
	}
	if q.getCurrencyByCodeStmt, err = db.PrepareContext(ctx, getCurrencyByCode); err != nil {
		return nil, fmt.Errorf("error preparing query GetCurrencyByCode: %w", err)
	}
	if q.getDailyClientForeignCurrencyVolumeStmt, err = db.PrepareContext(ctx, getDailyClientForeignCurrencyVolume); err != nil {
		return nil, fmt.Errorf("error preparing query GetDailyClientForeignCurrencyVolume: %w", err)
	}
	if q.listClientsStmt, err = db.PrepareContext(ctx, listClients); err != nil {
		return nil, fmt.Errorf("error preparing query ListClients: %w", err)
	}
	if q.listCurrenciesStmt, err = db.PrepareContext(ctx, listCurrencies); err != nil {
		return nil, fmt.Errorf("error preparing query ListCurrencies: %w", err)
	}
	if q.listOperationsStmt, err = db.PrepareContext(ctx, listOperations); err != nil {
		return nil, fmt.Errorf("error preparing query ListOperations: %w", err)
	}
	if q.listOperationsByClientAndDateRangeStmt, err = db.PrepareContext(ctx, listOperationsByClientAndDateRange); err != nil {
		return nil, fmt.Errorf("error preparing query ListOperationsByClientAndDateRange: %w", err)
	}
	if q.updateCurrencyStmt, err = db.PrepareContext(ctx, updateCurrency); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateCurrency: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createClientStmt != nil {
		if cerr := q.createClientStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createClientStmt: %w", cerr)
		}
	}
	if q.createCurrencyStmt != nil {
		if cerr := q.createCurrencyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createCurrencyStmt: %w", cerr)
		}
	}
	if q.createOperationStmt != nil {
		if cerr := q.createOperationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createOperationStmt: %w", cerr)
		}
	}
	if q.getClientByIDStmt != nil {
		if cerr := q.getClientByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getClientByIDStmt: %w", cerr)
		}
	}
	if q.getClientByPassportStmt != nil {
		if cerr := q.getClientByPassportStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getClientByPassportStmt: %w", cerr)
		}
	}
	if q.getCurrencyStmt != nil {
		if cerr := q.getCurrencyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCurrencyStmt: %w", cerr)
		}
	}
	if q.getCurrencyByCodeStmt != nil {
		if cerr := q.getCurrencyByCodeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCurrencyByCodeStmt: %w", cerr)
		}
	}
	if q.getDailyClientForeignCurrencyVolumeStmt != nil {
		if cerr := q.getDailyClientForeignCurrencyVolumeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getDailyClientForeignCurrencyVolumeStmt: %w", cerr)
		}
	}
	if q.listClientsStmt != nil {
		if cerr := q.listClientsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listClientsStmt: %w", cerr)
		}
	}
	if q.listCurrenciesStmt != nil {
		if cerr := q.listCurrenciesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listCurrenciesStmt: %w", cerr)
		}
	}
	if q.listOperationsStmt != nil {
		if cerr := q.listOperationsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listOperationsStmt: %w", cerr)
		}
	}
	if q.listOperationsByClientAndDateRangeStmt != nil {
		if cerr := q.listOperationsByClientAndDateRangeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listOperationsByClientAndDateRangeStmt: %w", cerr)
		}
	}
	if q.updateCurrencyStmt != nil {
		if cerr := q.updateCurrencyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateCurrencyStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                                      DBTX
	tx                                      *sql.Tx
	createClientStmt                        *sql.Stmt
	createCurrencyStmt                      *sql.Stmt
	createOperationStmt                     *sql.Stmt
	getClientByIDStmt                       *sql.Stmt
	getClientByPassportStmt                 *sql.Stmt
	getCurrencyStmt                         *sql.Stmt
	getCurrencyByCodeStmt                   *sql.Stmt
	getDailyClientForeignCurrencyVolumeStmt *sql.Stmt
	listClientsStmt                         *sql.Stmt
	listCurrenciesStmt                      *sql.Stmt
	listOperationsStmt                      *sql.Stmt
	listOperationsByClientAndDateRangeStmt  *sql.Stmt
	updateCurrencyStmt                      *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                                      tx,
		tx:                                      tx,
		createClientStmt:                        q.createClientStmt,
		createCurrencyStmt:                      q.createCurrencyStmt,
		createOperationStmt:                     q.createOperationStmt,
		getClientByIDStmt:                       q.getClientByIDStmt,
		getClientByPassportStmt:                 q.getClientByPassportStmt,
		getCurrencyStmt:                         q.getCurrencyStmt,
		getCurrencyByCodeStmt:                   q.getCurrencyByCodeStmt,
		getDailyClientForeignCurrencyVolumeStmt: q.getDailyClientForeignCurrencyVolumeStmt,
		listClientsStmt:                         q.listClientsStmt,
		listCurrenciesStmt:                      q.listCurrenciesStmt,
		listOperationsStmt:                      q.listOperationsStmt,
		listOperationsByClientAndDateRangeStmt:  q.listOperationsByClientAndDateRangeStmt,
		updateCurrencyStmt:                      q.updateCurrencyStmt,
	}
}
