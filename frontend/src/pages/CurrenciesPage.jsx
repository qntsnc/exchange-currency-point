import React, { useState, useEffect, useCallback } from 'react';
import { format, parseISO, isValid } from 'date-fns';
import { ru } from 'date-fns/locale';
import './CurrenciesPage.css';

const CurrenciesPage = () => {
  const [currencies, setCurrencies] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [newCurrency, setNewCurrency] = useState({ code: '', name: '', buy_rate: '', sell_rate: '' });
  const [editCurrency, setEditCurrency] = useState(null);
  const [activeTab, setActiveTab] = useState('currencies');
  const [operationLimits, setOperationLimits] = useState([
    { id: 1, limit_name: 'daily_currency_volume', limit_value: '1000.0', description: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–π –≤–∞–ª—é—Ç–æ–π –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ –∑–∞ –¥–µ–Ω—å', updated_at: new Date().toISOString() },
    { id: 2, limit_name: 'single_operation_amount', limit_value: '5000.0', description: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –æ–¥–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏', updated_at: new Date().toISOString() },
  ]);
  const [editingLimit, setEditingLimit] = useState(null);

  const fetchCurrencies = useCallback(async () => {
    setLoading(true);
    setError('');
    try {
      const response = await fetch('http://localhost:8080/api/v1/currencies');
      if (!response.ok) {
        const errData = await response.json();
        throw new Error(errData.message || `Network response was not ok (${response.status})`);
      }
      const data = await response.json();
      setCurrencies(data.data || []);
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∞–ª—é—Ç: ' + err.message);
      console.error('Fetch currencies error:', err);
    } finally {
      setLoading(false);
    }
  }, []);

  const handleCreateCurrency = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError('');
    try {
      if (!newCurrency.code || !newCurrency.name || !newCurrency.buy_rate || !newCurrency.sell_rate) {
        throw new Error('–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã');
      }
      const buyRate = parseFloat(newCurrency.buy_rate);
      const sellRate = parseFloat(newCurrency.sell_rate);
      if (isNaN(buyRate) || buyRate <= 0) {
        throw new Error('–ö—É—Ä—Å –ø–æ–∫—É–ø–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º');
      }
      if (isNaN(sellRate) || sellRate <= 0) {
        throw new Error('–ö—É—Ä—Å –ø—Ä–æ–¥–∞–∂–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º');
      }

      const payload = {
        code: newCurrency.code,
        name: newCurrency.name,
        buy_rate: Number(buyRate.toFixed(8)),
        sell_rate: Number(sellRate.toFixed(8)),
      };

      const response = await fetch('http://localhost:8080/api/v1/currencies', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload),
      });
      if (!response.ok) {
        const errData = await response.json();
        throw new Error(errData.message || `Failed to create currency (${response.status})`);
      }
      fetchCurrencies();
      setNewCurrency({ code: '', name: '', buy_rate: '', sell_rate: '' });
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∞–ª—é—Ç—ã: ' + err.message);
      console.error('Create currency error:', err);
    } finally {
      setLoading(false);
    }
  };

  const handleUpdateCurrency = async (e) => {
    e.preventDefault();
    if (!editCurrency) return;
    setLoading(true);
    setError('');
    try {
      if (!editCurrency.code || !editCurrency.buy_rate || !editCurrency.sell_rate) {
        throw new Error('–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã');
      }
      const buyRate = parseFloat(editCurrency.buy_rate);
      const sellRate = parseFloat(editCurrency.sell_rate);
      if (isNaN(buyRate) || buyRate <= 0) {
        throw new Error('–ö—É—Ä—Å –ø–æ–∫—É–ø–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º');
      }
      if (isNaN(sellRate) || sellRate <= 0) {
        throw new Error('–ö—É—Ä—Å –ø—Ä–æ–¥–∞–∂–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º');
      }

      const payload = {
        code: editCurrency.code,
        buy_rate: Number(buyRate.toFixed(8)),
        sell_rate: Number(sellRate.toFixed(8)),
      };

      const response = await fetch('http://localhost:8080/api/v1/currencies', {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload),
      });
      if (!response.ok) {
        let message = `Failed to update currency (${response.status})`;
        try {
          const errData = await response.json();
          message = errData.message || message;
          if (message.includes('not found')) {
            message = '–í–∞–ª—é—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞';
          } else if (message.includes('Invalid buy_rate')) {
            message = '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫—É—Ä—Å–∞ –ø–æ–∫—É–ø–∫–∏';
          } else if (message.includes('Invalid sell_rate')) {
            message = '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫—É—Ä—Å–∞ –ø—Ä–æ–¥–∞–∂–∏';
          }
        } catch (jsonErr) {
          console.error('Error parsing error response:', jsonErr);
        }
        throw new Error(message);
      }
      fetchCurrencies();
      setEditCurrency(null);
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∞–ª—é—Ç—ã: ' + err.message);
      console.error('Update currency error:', err);
    } finally {
      setLoading(false);
    }
  };

  const handleUpdateLimit = (e) => {
    e.preventDefault();
    if (!editingLimit) return;
    setOperationLimits(prev =>
      prev.map(limit =>
        limit.id === editingLimit.id ? { ...limit, limit_value: editingLimit.limit_value, updated_at: new Date().toISOString() } : limit
      )
    );
    setEditingLimit(null);
  };

  useEffect(() => {
    fetchCurrencies();
  }, [fetchCurrencies]);

  const formatRate = (rateStr) => {
    if (!rateStr) return 'N/A';
    const num = parseFloat(rateStr);
    return isNaN(num) ? rateStr : num.toFixed(6);
  };

  const formatDate = (dateTimeStr) => {
    if (!dateTimeStr) return '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
    try {
      const date = new Date(dateTimeStr);
      if (!isNaN(date.getTime())) {
        return date.toLocaleString('ru-RU');
      }
      return '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞';
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞—Ç—ã:', error);
      return '–û—à–∏–±–∫–∞ –¥–∞—Ç—ã';
    }
  };

  return (
    <div className="main-content">
      <div className="container">
        <h1 className="page-title">üí± –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞–ª—é—Ç–∞–º–∏</h1>
        <p className="page-subtitle">
          –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π –æ–±–º–µ–Ω–∞
        </p>

        {/* –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–∞–±—ã */}
        <div className="currency-tabs">
          <button 
            className={`tab-button ${activeTab === 'currencies' ? 'active' : ''}`}
            onClick={() => setActiveTab('currencies')}
          >
            <span className="tab-icon">üí∞</span>
            –í–∞–ª—é—Ç—ã –∏ –∫—É—Ä—Å—ã
          </button>
          <button 
            className={`tab-button ${activeTab === 'limits' ? 'active' : ''}`}
            onClick={() => setActiveTab('limits')}
          >
            <span className="tab-icon">‚öôÔ∏è</span>
            –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π
          </button>
        </div>

        {/* –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–∞–±–æ–≤ */}
        {activeTab === 'currencies' && (
          <div className="tab-content-area">
            {/* –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞–ª—é—Ç—ã */}
            <div className="currency-form-section">
              <h2 className="section-title">
                {editCurrency ? '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã' : '‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –≤–∞–ª—é—Ç—É'}
              </h2>
              
              {error && (
                <div className="alert alert-error">
                  <span className="alert-icon">‚ö†Ô∏è</span>
                  {error}
                </div>
              )}

              <form onSubmit={editCurrency ? handleUpdateCurrency : handleCreateCurrency} className="currency-form">
                <div className="form-grid">
                  <div className="form-field">
                    <label>–ö–æ–¥ –≤–∞–ª—é—Ç—ã</label>
                    <input 
                      value={editCurrency ? editCurrency.code : newCurrency.code} 
                      onChange={(e) => editCurrency 
                        ? setEditCurrency({ ...editCurrency, code: e.target.value }) 
                        : setNewCurrency({ ...newCurrency, code: e.target.value })
                      } 
                      placeholder="USD, EUR, GBP..." 
                      required 
                      disabled={editCurrency !== null}
                      className="form-input"
                    />
                  </div>
                  
                  <div className="form-field">
                    <label>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ</label>
                    <input 
                      value={editCurrency ? editCurrency.name : newCurrency.name} 
                      onChange={(e) => editCurrency 
                        ? setEditCurrency({ ...editCurrency, name: e.target.value }) 
                        : setNewCurrency({ ...newCurrency, name: e.target.value })
                      } 
                      placeholder="–î–æ–ª–ª–∞—Ä –°–®–ê..." 
                      required 
                      disabled={editCurrency !== null}
                      className="form-input"
                    />
                  </div>
                  
                  <div className="form-field">
                    <label>–ö—É—Ä—Å –ø–æ–∫—É–ø–∫–∏ ‚ÇΩ</label>
                    <input 
                      type="number" 
                      step="0.00000001" 
                      value={editCurrency ? editCurrency.buy_rate : newCurrency.buy_rate} 
                      onChange={(e) => editCurrency 
                        ? setEditCurrency({ ...editCurrency, buy_rate: e.target.value }) 
                        : setNewCurrency({ ...newCurrency, buy_rate: e.target.value })
                      } 
                      placeholder="90.50" 
                      required
                      className="form-input"
                    />
                  </div>
                  
                  <div className="form-field">
                    <label>–ö—É—Ä—Å –ø—Ä–æ–¥–∞–∂–∏ ‚ÇΩ</label>
                    <input 
                      type="number" 
                      step="0.00000001" 
                      value={editCurrency ? editCurrency.sell_rate : newCurrency.sell_rate} 
                      onChange={(e) => editCurrency 
                        ? setEditCurrency({ ...editCurrency, sell_rate: e.target.value }) 
                        : setNewCurrency({ ...newCurrency, sell_rate: e.target.value })
                      } 
                      placeholder="89.50" 
                      required
                      className="form-input"
                    />
                  </div>
                </div>

                <div className="form-actions">
                  <button 
                    type="submit" 
                    disabled={loading}
                    className="btn-primary"
                  >
                    {loading ? (
                      <>
                        <div className="loader"></div>
                        –û–±—Ä–∞–±–æ—Ç–∫–∞...
                      </>
                    ) : (
                      <>
                        <span>{editCurrency ? 'üíæ' : '‚ûï'}</span>
                        {editCurrency ? '–û–±–Ω–æ–≤–∏—Ç—å –≤–∞–ª—é—Ç—É' : '–î–æ–±–∞–≤–∏—Ç—å –≤–∞–ª—é—Ç—É'}
                      </>
                    )}
                  </button>
                  {editCurrency && (
                    <button 
                      type="button" 
                      onClick={() => setEditCurrency(null)}
                      className="btn-secondary"
                    >
                      <span>‚ùå</span>
                      –û—Ç–º–µ–Ω–∞
                    </button>
                  )}
                </div>
              </form>
            </div>

            {/* –¢–∞–±–ª–∏—Ü–∞ –≤–∞–ª—é—Ç */}
            <div className="currencies-table-section">
              <h2 className="section-title">üìä –°–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç</h2>
              
              {loading && (
                <div className="loading-state">
                  <div className="loader"></div>
                  <p>–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∞–ª—é—Ç...</p>
                </div>
              )}

              {!loading && currencies.length > 0 && (
                <div className="table-container">
                  <table className="modern-table">
                    <thead>
                      <tr>
                        <th>–ö–æ–¥</th>
                        <th>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ</th>
                        <th>–ö—É—Ä—Å –ø–æ–∫—É–ø–∫–∏</th>
                        <th>–ö—É—Ä—Å –ø—Ä–æ–¥–∞–∂–∏</th>
                        <th>–°–ø—Ä–µ–¥</th>
                        <th>–û–±–Ω–æ–≤–ª–µ–Ω–æ</th>
                        <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                      </tr>
                    </thead>
                    <tbody>
                      {currencies.map(currency => {
                        const buyRate = parseFloat(currency.buy_rate);
                        const sellRate = parseFloat(currency.sell_rate);
                        const spread = ((buyRate - sellRate) / sellRate * 100).toFixed(2);
                        
                        return (
                          <tr key={currency.id} className="table-row">
                            <td>
                              <div className="currency-code">
                                {currency.code}
                              </div>
                            </td>
                            <td>
                              <div className="currency-name">
                                {currency.name}
                              </div>
                            </td>
                            <td>
                              <div className="rate buy-rate">
                                <span className="rate-value">{formatRate(currency.buy_rate)}</span>
                                <span className="rate-currency">‚ÇΩ</span>
                              </div>
                            </td>
                            <td>
                              <div className="rate sell-rate">
                                <span className="rate-value">{formatRate(currency.sell_rate)}</span>
                                <span className="rate-currency">‚ÇΩ</span>
                              </div>
                            </td>
                            <td>
                              <div className="spread">
                                {spread}%
                              </div>
                            </td>
                            <td>
                              <div className="date">
                                {formatDate(currency.last_rate_update_at)}
                              </div>
                            </td>
                            <td>
                              <button 
                                onClick={() => setEditCurrency({ ...currency })}
                                className="btn-edit"
                                title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫—É—Ä—Å—ã"
                              >
                                ‚úèÔ∏è
                              </button>
                            </td>
                          </tr>
                        );
                      })}
                    </tbody>
                  </table>
                </div>
              )}

              {!loading && currencies.length === 0 && (
                <div className="empty-state">
                  <div className="empty-icon">üí±</div>
                  <h3>–í–∞–ª—é—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
                  <p>–ù–∞—á–Ω–∏—Ç–µ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–≤–æ–π –≤–∞–ª—é—Ç—ã –¥–ª—è –æ–±–º–µ–Ω–∞</p>
                </div>
              )}
            </div>
          </div>
        )}

        {activeTab === 'limits' && (
          <div className="tab-content-area">
            <div className="limits-section">
              <h2 className="section-title">‚öôÔ∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π</h2>
              
              <div className="table-container">
                <table className="modern-table">
                  <thead>
                    <tr>
                      <th>–ù–∞–∑–≤–∞–Ω–∏–µ</th>
                      <th>–û–ø–∏—Å–∞–Ω–∏–µ</th>
                      <th>–ó–Ω–∞—á–µ–Ω–∏–µ</th>
                      <th>–û–±–Ω–æ–≤–ª–µ–Ω–æ</th>
                      <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                    </tr>
                  </thead>
                  <tbody>
                    {operationLimits.map(limit => (
                      <tr key={limit.id} className="table-row">
                        <td>
                          <div className="limit-name">
                            {limit.limit_name}
                          </div>
                        </td>
                        <td>
                          <div className="limit-description">
                            {limit.description}
                          </div>
                        </td>
                        <td>
                          {editingLimit && editingLimit.id === limit.id ? (
                            <input 
                              type="number" 
                              step="0.0001" 
                              value={editingLimit.limit_value}
                              onChange={(e) => setEditingLimit({...editingLimit, limit_value: e.target.value})}
                              className="limit-input"
                            />
                          ) : (
                            <div className="limit-value">
                              {formatRate(limit.limit_value)} ‚ÇΩ
                            </div>
                          )}
                        </td>
                        <td>
                          <div className="date">
                            {formatDate(limit.updated_at)}
                          </div>
                        </td>
                        <td>
                          {editingLimit && editingLimit.id === limit.id ? (
                            <div className="action-buttons">
                              <button 
                                onClick={handleUpdateLimit}
                                className="btn-save"
                                title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"
                              >
                                üíæ
                              </button>
                              <button 
                                onClick={() => setEditingLimit(null)}
                                className="btn-cancel"
                                title="–û—Ç–º–µ–Ω–∞"
                              >
                                ‚ùå
                              </button>
                            </div>
                          ) : (
                            <button 
                              onClick={() => setEditingLimit({ ...limit })}
                              className="btn-edit"
                              title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
                            >
                              ‚úèÔ∏è
                            </button>
                          )}
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default CurrenciesPage;